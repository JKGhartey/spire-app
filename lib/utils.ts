import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

// generated by shadcn
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

// created by chatgpt
export function isBase64Image(imageData: string) {
  const base64Regex = /^data:image\/(png|jpe?g|gif|webp);base64,/;
  return base64Regex.test(imageData);
}

// created by chatgpt
export function formatDateString(dateString: string) {
  const date = new Date(dateString);
  const currentDate = new Date();

  const timeDifferenceInMilliseconds = currentDate.getTime() - date.getTime();
  const millisecondsInMinute = 60 * 1000;
  const millisecondsInHour = 60 * millisecondsInMinute;
  const millisecondsInDay = 24 * millisecondsInHour;
  const millisecondsInFiveDays = 5 * millisecondsInDay;

  if (timeDifferenceInMilliseconds < millisecondsInFiveDays) {
    if (timeDifferenceInMilliseconds < millisecondsInMinute) {
      const secondsAgo = Math.floor(timeDifferenceInMilliseconds / 1000);
      return `${secondsAgo} seconds ago`;
    } else if (timeDifferenceInMilliseconds < millisecondsInHour) {
      const minutesAgo = Math.floor(
        timeDifferenceInMilliseconds / millisecondsInMinute
      );
      return `${minutesAgo} minutes ago`;
    } else if (timeDifferenceInMilliseconds < millisecondsInDay) {
      const hoursAgo = Math.floor(
        timeDifferenceInMilliseconds / millisecondsInHour
      );
      return `${hoursAgo} hours ago`;
    } else {
      const daysAgo = Math.floor(
        timeDifferenceInMilliseconds / millisecondsInDay
      );
      return `${daysAgo} days ago`;
    }
  } else {
    const options: Intl.DateTimeFormatOptions = {
      year: "numeric",
      month: "short",
      day: "numeric",
    };

    const formattedDate = date.toLocaleDateString(undefined, options);
    return formattedDate;
  }
}

// created by chatgpt
export function formatThreadCount(count: number): string {
  if (count === 0) {
    return "No Threads";
  } else {
    const threadCount = count.toString().padStart(2, "0");
    const threadWord = count === 1 ? "Thread" : "Threads";
    return `${threadCount} ${threadWord}`;
  }
}
